=======================
How to Use 1-my_list.py
=======================

This module defines ``MyList`` class that inherits from list.

Usage
=====

``MyList`` class have Public instance method ``print_sorted(self)``
that prints the list, but sorted (ascending sort).

Imported function from module:
   >>> MyList = __import__('1-my_list').MyList
   >>> my_list = MyList()

Test list empty:
   >>> print(my_list)
   []

Test print list:
   >>> my_list.print_sorted()
   []

Test Normal list print:
   >>> my_list.append(1)
   >>> my_list.append(4)
   >>> my_list.append(2)
   >>> my_list.append(3)
   >>> my_list.append(5)
   >>> my_list.print_sorted()
   [1, 2, 3, 4, 5]

Test edit element in list:
   >>> my_list[4] = 7
   >>> print(my_list)
   [1, 4, 2, 3, 7]

Test removing element from list:
   >>> my_list.remove(1)
   >>> my_list.print_sorted()
   [2, 3, 4, 7]

print_sorted method called via class with no args:
    >>> my_list.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg:
    >>> my_list.print_sorted([4, 2, 5])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method called with 2 args:
    >>> my_list.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Teat print_sorted method with None arg:
    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable
